/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ListableUpgradeable {
  export type SwapStruct = {
    creator: PromiseOrValue<string>;
    tokenOwner: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    amountLeft: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type SwapStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    creator: string;
    tokenOwner: string;
    tokenId: BigNumber;
    amount: BigNumber;
    amountLeft: BigNumber;
    price: BigNumber;
    state: number;
  };
}

export interface ListableUpgradeableInterface extends utils.Interface {
  functions: {
    "getSwap(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getSwap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getSwap", data: BytesLike): Result;

  events: {
    "Collected(uint256,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Listed(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "ListingCanceled(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCanceled"): EventFragment;
}

export interface CollectedEventObject {
  id: BigNumber;
  editions: BigNumber;
  buyer: string;
}
export type CollectedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CollectedEventObject
>;

export type CollectedEventFilter = TypedEventFilter<CollectedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ListedEventObject {
  id: BigNumber;
  creator: string;
  tokenOwner: string;
  tokenId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
}
export type ListedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  ListedEventObject
>;

export type ListedEventFilter = TypedEventFilter<ListedEvent>;

export interface ListingCanceledEventObject {
  id: BigNumber;
}
export type ListingCanceledEvent = TypedEvent<
  [BigNumber],
  ListingCanceledEventObject
>;

export type ListingCanceledEventFilter = TypedEventFilter<ListingCanceledEvent>;

export interface ListableUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ListableUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSwap(
      swapId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ListableUpgradeable.SwapStructOutput]>;
  };

  getSwap(
    swapId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ListableUpgradeable.SwapStructOutput>;

  callStatic: {
    getSwap(
      swapId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ListableUpgradeable.SwapStructOutput>;
  };

  filters: {
    "Collected(uint256,uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      editions?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): CollectedEventFilter;
    Collected(
      id?: PromiseOrValue<BigNumberish> | null,
      editions?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): CollectedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Listed(uint256,address,address,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      tokenOwner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      price?: null
    ): ListedEventFilter;
    Listed(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      tokenOwner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      price?: null
    ): ListedEventFilter;

    "ListingCanceled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ListingCanceledEventFilter;
    ListingCanceled(
      id?: PromiseOrValue<BigNumberish> | null
    ): ListingCanceledEventFilter;
  };

  estimateGas: {
    getSwap(
      swapId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSwap(
      swapId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
