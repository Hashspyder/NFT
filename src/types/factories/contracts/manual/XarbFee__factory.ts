/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  XarbFee,
  XarbFeeInterface,
} from "../../../contracts/manual/XarbFee";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ContractFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeReceiver",
        type: "address",
      },
    ],
    name: "ContractFeeReceiverAddressChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getContractFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractFeeReceiverAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setContractFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_feeReceiver",
        type: "address",
      },
    ],
    name: "setContractFeeReceiverAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000abe38038062000abe833981810160405281019062000037919062000219565b620000576200004b6200013660201b60201c565b6200013e60201b60201c565b806001819055506200006e6200013660201b60201c565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff7823bf5c64a3b328298a4ccbee35e1e1001835cc78be82dfb49f9ba7b5d900d81604051620000df919062000284565b60405180910390a17f5d700e8cb23224f26609028d6b2841628e3a71350dc4cb8dddf2083d696e57f2620001186200013660201b60201c565b60405162000127919062000267565b60405180910390a150620002f9565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200021381620002df565b92915050565b6000602082840312156200022c57600080fd5b60006200023c8482850162000202565b91505092915050565b6200025081620002a1565b82525050565b6200026181620002d5565b82525050565b60006020820190506200027e600083018462000245565b92915050565b60006020820190506200029b600083018462000256565b92915050565b6000620002ae82620002b5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002ea81620002d5565b8114620002f657600080fd5b50565b6107b580620003096000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063722ddf701161005b578063722ddf70146100c65780638da5cb5b146100e2578063917c43c514610100578063f2fde38b1461011e5761007d565b80631ea9fd8d146100825780634aa67d31146100a0578063715018a6146100bc575b600080fd5b61008a61013a565b60405161009791906105b7565b60405180910390f35b6100ba60048036038101906100b591906104d6565b610164565b005b6100c46101ad565b005b6100e060048036038101906100db91906104ad565b6101c1565b005b6100ea610244565b6040516100f79190610581565b60405180910390f35b61010861026d565b6040516101159190610612565b60405180910390f35b61013860048036038101906101339190610484565b610277565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61016c6102fb565b806001819055507ff7823bf5c64a3b328298a4ccbee35e1e1001835cc78be82dfb49f9ba7b5d900d816040516101a29190610612565b60405180910390a150565b6101b56102fb565b6101bf6000610379565b565b6101c96102fb565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5d700e8cb23224f26609028d6b2841628e3a71350dc4cb8dddf2083d696e57f281604051610239919061059c565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b61027f6102fb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906105d2565b60405180910390fd5b6102f881610379565b50565b61030361043d565b73ffffffffffffffffffffffffffffffffffffffff16610321610244565b73ffffffffffffffffffffffffffffffffffffffff1614610377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036e906105f2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506104548161073a565b92915050565b60008135905061046981610751565b92915050565b60008135905061047e81610768565b92915050565b60006020828403121561049657600080fd5b60006104a484828501610445565b91505092915050565b6000602082840312156104bf57600080fd5b60006104cd8482850161045a565b91505092915050565b6000602082840312156104e857600080fd5b60006104f68482850161046f565b91505092915050565b6105088161068c565b82525050565b61051781610650565b82525050565b6105268161063e565b82525050565b600061053960268361062d565b9150610544826106c2565b604082019050919050565b600061055c60208361062d565b915061056782610711565b602082019050919050565b61057b81610682565b82525050565b6000602082019050610596600083018461051d565b92915050565b60006020820190506105b160008301846104ff565b92915050565b60006020820190506105cc600083018461050e565b92915050565b600060208201905081810360008301526105eb8161052c565b9050919050565b6000602082019050818103600083015261060b8161054f565b9050919050565b60006020820190506106276000830184610572565b92915050565b600082825260208201905092915050565b600061064982610662565b9050919050565b600061065b82610662565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106978261069e565b9050919050565b60006106a9826106b0565b9050919050565b60006106bb82610662565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6107438161063e565b811461074e57600080fd5b50565b61075a81610650565b811461076557600080fd5b50565b61077181610682565b811461077c57600080fd5b5056fea2646970667358221220a0b03625ff0abaf82c9546c9003a1c44350a3757072c1429ee9907d9c816d81464736f6c63430008040033";

type XarbFeeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XarbFeeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XarbFee__factory extends ContractFactory {
  constructor(...args: XarbFeeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XarbFee> {
    return super.deploy(_fee, overrides || {}) as Promise<XarbFee>;
  }
  override getDeployTransaction(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_fee, overrides || {});
  }
  override attach(address: string): XarbFee {
    return super.attach(address) as XarbFee;
  }
  override connect(signer: Signer): XarbFee__factory {
    return super.connect(signer) as XarbFee__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XarbFeeInterface {
    return new utils.Interface(_abi) as XarbFeeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XarbFee {
    return new Contract(address, _abi, signerOrProvider) as XarbFee;
  }
}
