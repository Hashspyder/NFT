/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Royalties,
  RoyaltiesInterface,
} from "../../../contracts/manual/Royalties";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxRoyalty",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
    ],
    name: "MaxPossibleRoyaltyChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getRoyalties",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct RoyaltyStruct.Royalty[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPossibleRoyalty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
    ],
    name: "setMaxPossibleRoyalty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109ea3803806109ea83398181016040528101906100329190610173565b61004e61004361009260201b60201c565b61009a60201b60201c565b806002819055507f0eda869ebbc9379393fdc0fb7eef66e718e37158f3ceaaf26fa8697614f2635c8160405161008491906101ab565b60405180910390a1506101e7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008151905061016d816101d0565b92915050565b60006020828403121561018557600080fd5b60006101938482850161015e565b91505092915050565b6101a5816101c6565b82525050565b60006020820190506101c0600083018461019c565b92915050565b6000819050919050565b6101d9816101c6565b81146101e457600080fd5b50565b6107f4806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a614610067578063834ef83e146100715780638da5cb5b1461008d578063bb3bafd6146100ab578063dc2d46f4146100db578063f2fde38b146100f9575b600080fd5b61006f610115565b005b61008b60048036038101906100869190610498565b610129565b005b610095610172565b6040516100a291906105e8565b60405180910390f35b6100c560048036038101906100c09190610498565b61019b565b6040516100d29190610603565b60405180910390f35b6100e361026d565b6040516100f09190610665565b60405180910390f35b610113600480360381019061010e919061046f565b610277565b005b61011d6102fb565b6101276000610379565b565b6101316102fb565b806002819055507f0eda869ebbc9379393fdc0fb7eef66e718e37158f3ceaaf26fa8697614f2635c816040516101679190610665565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561026257838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815260200190600101906101d0565b505050509050919050565b6000600254905090565b61027f6102fb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610625565b60405180910390fd5b6102f881610379565b50565b61030361043d565b73ffffffffffffffffffffffffffffffffffffffff16610321610172565b73ffffffffffffffffffffffffffffffffffffffff1614610377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036e90610645565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061045481610790565b92915050565b600081359050610469816107a7565b92915050565b60006020828403121561048157600080fd5b600061048f84828501610445565b91505092915050565b6000602082840312156104aa57600080fd5b60006104b88482850161045a565b91505092915050565b60006104cd838361059b565b60408301905092915050565b6104e2816106dc565b82525050565b6104f1816106ca565b82525050565b600061050282610690565b61050c81856106a8565b935061051783610680565b8060005b8381101561054857815161052f88826104c1565b975061053a8361069b565b92505060018101905061051b565b5085935050505092915050565b60006105626026836106b9565b915061056d82610718565b604082019050919050565b60006105856020836106b9565b915061059082610767565b602082019050919050565b6040820160008201516105b160008501826104d9565b5060208201516105c460208501826105ca565b50505050565b6105d38161070e565b82525050565b6105e28161070e565b82525050565b60006020820190506105fd60008301846104e8565b92915050565b6000602082019050818103600083015261061d81846104f7565b905092915050565b6000602082019050818103600083015261063e81610555565b9050919050565b6000602082019050818103600083015261065e81610578565b9050919050565b600060208201905061067a60008301846105d9565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106d5826106ee565b9050919050565b60006106e7826106ee565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610799816106ca565b81146107a457600080fd5b50565b6107b08161070e565b81146107bb57600080fd5b5056fea2646970667358221220a906f2b1a599359425f923062054e1ccb2d385921e65354525a65f4c744a132d64736f6c63430008040033";

type RoyaltiesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltiesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Royalties__factory extends ContractFactory {
  constructor(...args: RoyaltiesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _maxRoyalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Royalties> {
    return super.deploy(_maxRoyalty, overrides || {}) as Promise<Royalties>;
  }
  override getDeployTransaction(
    _maxRoyalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_maxRoyalty, overrides || {});
  }
  override attach(address: string): Royalties {
    return super.attach(address) as Royalties;
  }
  override connect(signer: Signer): Royalties__factory {
    return super.connect(signer) as Royalties__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltiesInterface {
    return new utils.Interface(_abi) as RoyaltiesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Royalties {
    return new Contract(address, _abi, signerOrProvider) as Royalties;
  }
}
