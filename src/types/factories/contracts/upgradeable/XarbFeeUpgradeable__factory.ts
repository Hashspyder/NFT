/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  XarbFeeUpgradeable,
  XarbFeeUpgradeableInterface,
} from "../../../contracts/upgradeable/XarbFeeUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ContractFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeReceiver",
        type: "address",
      },
    ],
    name: "ContractFeeReceiverAddressChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getContractFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractFeeReceiverAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setContractFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_feeReceiver",
        type: "address",
      },
    ],
    name: "setContractFeeReceiverAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107b8806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063722ddf701161005b578063722ddf70146100c65780638da5cb5b146100e2578063917c43c514610100578063f2fde38b1461011e5761007d565b80631ea9fd8d146100825780634aa67d31146100a0578063715018a6146100bc575b600080fd5b61008a61013a565b60405161009791906105ba565b60405180910390f35b6100ba60048036038101906100b591906104d9565b610164565b005b6100c46101ad565b005b6100e060048036038101906100db91906104b0565b6101c1565b005b6100ea610244565b6040516100f79190610584565b60405180910390f35b61010861026e565b6040516101159190610615565b60405180910390f35b61013860048036038101906101339190610487565b610278565b005b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61016c6102fc565b806065819055507ff7823bf5c64a3b328298a4ccbee35e1e1001835cc78be82dfb49f9ba7b5d900d816040516101a29190610615565b60405180910390a150565b6101b56102fc565b6101bf600061037a565b565b6101c96102fc565b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5d700e8cb23224f26609028d6b2841628e3a71350dc4cb8dddf2083d696e57f281604051610239919061059f565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606554905090565b6102806102fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e7906105d5565b60405180910390fd5b6102f98161037a565b50565b610304610440565b73ffffffffffffffffffffffffffffffffffffffff16610322610244565b73ffffffffffffffffffffffffffffffffffffffff1614610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036f906105f5565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000813590506104578161073d565b92915050565b60008135905061046c81610754565b92915050565b6000813590506104818161076b565b92915050565b60006020828403121561049957600080fd5b60006104a784828501610448565b91505092915050565b6000602082840312156104c257600080fd5b60006104d08482850161045d565b91505092915050565b6000602082840312156104eb57600080fd5b60006104f984828501610472565b91505092915050565b61050b8161068f565b82525050565b61051a81610653565b82525050565b61052981610641565b82525050565b600061053c602683610630565b9150610547826106c5565b604082019050919050565b600061055f602083610630565b915061056a82610714565b602082019050919050565b61057e81610685565b82525050565b60006020820190506105996000830184610520565b92915050565b60006020820190506105b46000830184610502565b92915050565b60006020820190506105cf6000830184610511565b92915050565b600060208201905081810360008301526105ee8161052f565b9050919050565b6000602082019050818103600083015261060e81610552565b9050919050565b600060208201905061062a6000830184610575565b92915050565b600082825260208201905092915050565b600061064c82610665565b9050919050565b600061065e82610665565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061069a826106a1565b9050919050565b60006106ac826106b3565b9050919050565b60006106be82610665565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61074681610641565b811461075157600080fd5b50565b61075d81610653565b811461076857600080fd5b50565b61077481610685565b811461077f57600080fd5b5056fea264697066735822122025dfe746f245f130eafbed5bf46c56045fb1b4443a238de893f5a418905c46e764736f6c63430008040033";

type XarbFeeUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XarbFeeUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XarbFeeUpgradeable__factory extends ContractFactory {
  constructor(...args: XarbFeeUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XarbFeeUpgradeable> {
    return super.deploy(overrides || {}) as Promise<XarbFeeUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XarbFeeUpgradeable {
    return super.attach(address) as XarbFeeUpgradeable;
  }
  override connect(signer: Signer): XarbFeeUpgradeable__factory {
    return super.connect(signer) as XarbFeeUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XarbFeeUpgradeableInterface {
    return new utils.Interface(_abi) as XarbFeeUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XarbFeeUpgradeable {
    return new Contract(address, _abi, signerOrProvider) as XarbFeeUpgradeable;
  }
}
