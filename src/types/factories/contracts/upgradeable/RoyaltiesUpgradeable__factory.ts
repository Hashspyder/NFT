/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RoyaltiesUpgradeable,
  RoyaltiesUpgradeableInterface,
} from "../../../contracts/upgradeable/RoyaltiesUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
    ],
    name: "MaxPossibleRoyaltyChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getRoyalties",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct RoyaltyStruct.Royalty[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxPossibleRoyalty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "royalty",
        type: "uint256",
      },
    ],
    name: "setMaxPossibleRoyalty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a614610067578063834ef83e146100715780638da5cb5b1461008d578063bb3bafd6146100ab578063dc2d46f4146100db578063f2fde38b146100f9575b600080fd5b61006f610115565b005b61008b6004803603810190610086919061049b565b610129565b005b610095610172565b6040516100a291906105eb565b60405180910390f35b6100c560048036038101906100c0919061049b565b61019c565b6040516100d29190610606565b60405180910390f35b6100e361026e565b6040516100f09190610668565b60405180910390f35b610113600480360381019061010e9190610472565b610278565b005b61011d6102fc565b610127600061037a565b565b6101316102fc565b806066819055507f0eda869ebbc9379393fdc0fb7eef66e718e37158f3ceaaf26fa8697614f2635c816040516101679190610668565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060656000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561026357838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815260200190600101906101d1565b505050509050919050565b6000606654905090565b6102806102fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e790610628565b60405180910390fd5b6102f98161037a565b50565b610304610440565b73ffffffffffffffffffffffffffffffffffffffff16610322610172565b73ffffffffffffffffffffffffffffffffffffffff1614610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036f90610648565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061045781610793565b92915050565b60008135905061046c816107aa565b92915050565b60006020828403121561048457600080fd5b600061049284828501610448565b91505092915050565b6000602082840312156104ad57600080fd5b60006104bb8482850161045d565b91505092915050565b60006104d0838361059e565b60408301905092915050565b6104e5816106df565b82525050565b6104f4816106cd565b82525050565b600061050582610693565b61050f81856106ab565b935061051a83610683565b8060005b8381101561054b57815161053288826104c4565b975061053d8361069e565b92505060018101905061051e565b5085935050505092915050565b60006105656026836106bc565b91506105708261071b565b604082019050919050565b60006105886020836106bc565b91506105938261076a565b602082019050919050565b6040820160008201516105b460008501826104dc565b5060208201516105c760208501826105cd565b50505050565b6105d681610711565b82525050565b6105e581610711565b82525050565b600060208201905061060060008301846104eb565b92915050565b6000602082019050818103600083015261062081846104fa565b905092915050565b6000602082019050818103600083015261064181610558565b9050919050565b600060208201905081810360008301526106618161057b565b9050919050565b600060208201905061067d60008301846105dc565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106d8826106f1565b9050919050565b60006106ea826106f1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61079c816106cd565b81146107a757600080fd5b50565b6107b381610711565b81146107be57600080fd5b5056fea264697066735822122041af09e1d3d921821f3fe9f79a3e651cb358258e82c5ee6d7347ad06f90d6d3664736f6c63430008040033";

type RoyaltiesUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltiesUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RoyaltiesUpgradeable__factory extends ContractFactory {
  constructor(...args: RoyaltiesUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RoyaltiesUpgradeable> {
    return super.deploy(overrides || {}) as Promise<RoyaltiesUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RoyaltiesUpgradeable {
    return super.attach(address) as RoyaltiesUpgradeable;
  }
  override connect(signer: Signer): RoyaltiesUpgradeable__factory {
    return super.connect(signer) as RoyaltiesUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltiesUpgradeableInterface {
    return new utils.Interface(_abi) as RoyaltiesUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RoyaltiesUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RoyaltiesUpgradeable;
  }
}
